Problem-6

An XOR linked list is a more memory efficient doubly linked list. Instead of each node holding 
next and prev fields, it holds a field named both, which is an XOR of the next 
node and the previous node. 
Implement an XOR linked list; it has an add(element) which adds the element to the end, 
and a get(index) which returns the node at index.

If using a language that has no pointers (such as Python), 
you can assume you have access to get_pointer and dereference_pointer functions that 
converts between nodes and memory addresses.

Solution
	-For the head, both will just be the address of next, and if it's the tail, 
	 it should just be the address of prev. 
	 And intermediate nodes should have an XOR of next and prev.
	-Let's work through get first, assuming that the above conditions are maintained. 
	 Then, given a node, to go to the next node, we have to XOR the current node's 
	 both with the previous node's address. And to handle getting the next node 
 	 from the head, we would initialize the previous node's address as 0.
	-To implement add, we would need to update current tail's both to be XOR'd by 
	 its current both the new node's memory address. Then the new node's both would 
 	 just point to the memory address of the current tail. Finally, we'd update 
	 the current tail to be equal to the new node.